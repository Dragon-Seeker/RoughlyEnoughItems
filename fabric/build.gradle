plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

loom {
    accessWidenerPath = file("src/main/resources/roughlyenoughitems.accessWidener")
}

def depProjects = [":api", ":runtime", ":default-plugin"]

dependencies {
    modApi("net.fabricmc:fabric-loader:${project.fabricloader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${project.fabric_api}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(module: "fabric-api")
    }
    modRuntime("com.terraformersmc:modmenu:${modmenu_version}") { transitive false }
    modApi("me.shedaniel:architectury-fabric:${architectury_version}")

    depProjects.forEach {
        common(project(path: it, configuration: "dev")) { transitive false }
        shadowCommon(project(path: it, configuration: "transformProductionFabric")) { transitive false }
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    afterEvaluate {
        depProjects.forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from depSources.archiveFile.map { zipTree(it) }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.name + "-" + project.name
            from components.java
        }
        ["api", "default-plugin", "runtime"].forEach { projectName ->
            create(projectName + "Fabric", MavenPublication.class) { publication ->
                publication.artifactId = rootProject.name + "-" + projectName + "-fabric"
                project.afterEvaluate {
                    def project = project(":" + projectName)
                    publication.artifact(project.fakeJar) { classifier null }
                    def remapSourcesJarTask = project.remapSourcesJar
                    publication.artifact(remapSourcesJarTask.output) {
                        builtBy remapSourcesJarTask
                        classifier "sources"
                    }
                }
            }
        }
    }
}

curseforge {
    if (false && (project.hasProperty('danielshe_curse_api_key') || System.getenv('danielshe_curse_api_key') != null)) {
        apiKey = project.hasProperty('danielshe_curse_api_key') ? project.property('danielshe_curse_api_key') : System.getenv('danielshe_curse_api_key')
        project {
            id = "310111"
            releaseType = "release"
            changelogType = "html"
            changelog = rootProject.releaseChangelog
            addGameVersion "1.17"
            addGameVersion "Fabric"
            relations {
                requiredDependency "architectury-fabric"
                requiredDependency "cloth-config"
                requiredDependency "fabric-api"
            }
            mainArtifact(tasks.getByName("remapJar")) {
                displayName = "[Fabric $project.supported_version] v$project.version"
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}
