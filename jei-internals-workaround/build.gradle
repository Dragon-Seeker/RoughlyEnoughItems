import java.util.zip.ZipFile

archivesBaseName = rootProject.name + "-" + project.name

dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")
}

loom {
    forge {
        mixinConfig "rei-jei-internals-workaround.mixins.json"
    }
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

curseforge {
    if (project.hasProperty('danielshe_curse_api_key') || System.getenv('danielshe_curse_api_key') != null) {
        apiKey = project.hasProperty('danielshe_curse_api_key') ? project.property('danielshe_curse_api_key') : System.getenv('danielshe_curse_api_key')
        project {
            id = "521393"
            releaseType = "beta"
            changelogType = "html"
            changelog = rootProject.releaseChangelog
            addGameVersion "1.16.4"
            addGameVersion "1.16.5"
            addGameVersion "Java 8"
            addGameVersion "Forge"
            relations {
                requiredDependency "roughly-enough-items-forge"
            }
            mainArtifact(tasks.getByName("remapJar")) {
                displayName = "[Forge $project.supported_version] v$project.version"
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

task updateJEIAssets {
    doLast {
        File jeiZip = file("build/jei.zip")
        jeiZip.delete()
        jeiZip.parentFile.mkdirs()
        jeiZip.withOutputStream { out ->
            new URL("https://github.com/mezz/JustEnoughItems/archive/refs/heads/1.17.zip").withInputStream { from -> out << from; }
        }
        new ZipFile(jeiZip).withCloseable { ZipFile zip ->
            zip.stream().forEach { entry ->
                String path = entry.name.substring(entry.name.indexOf('/') + 1)
                if (path.startsWith("src/main/resources/assets") && !entry.isDirectory()) {
                    File newFile = file(path)
                    newFile.delete()
                    newFile.parentFile.mkdirs()
                    newFile.withOutputStream { out ->
                        out << zip.getInputStream(entry)
                    }
                }
            }
        }
    }
}
